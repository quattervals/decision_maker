import { TabWidget, TextEdit, Button, VerticalBox, StandardTableView, ListView, StandardListView, HorizontalBox, StandardButton } from "std-widgets.slint";

export struct Parameter  {
    name: string,
    score: int,
}

component Compete inherits Rectangle {
    in-out property <Parameter> lhs_param;
    in-out property <Parameter> rhs_param;
    // callback lhs_chosen;
    // callback rhs_chosen;


    VerticalBox {
        Text {
            horizontal-alignment: center;
            vertical-alignment: center;
            text: "Which one do you value higher?\nClick the corresponding button";
        }

        HorizontalBox {
            Button {
                text: root.lhs_param.name;
                clicked => {
                    root.lhs_param.score += 1;
                    // next
                }
            }

            Button {
                text: root.rhs_param.name;
                clicked => {
                    root.rhs_param.score += 1;
                    // display next
            }
            }
        }
    }
}

component EditParams inherits Rectangle {

    callback discard;
    callback append;

    callback parameters_edited(string);
    in-out property <string> parameters: "";
    // callback lhs_chosen;
    // callback rhs_chosen;
    HorizontalLayout {

        VerticalBox {

            preferred-width: parent.width * 3 / 4;
            Text {
                text: "Enter Parameters";
            }

            pe := TextEdit {
                font-size: 14px;

                text: root.parameters;
                edited(text) => {
                    root.parameters_edited(self.text);
                }
            }
        }

        VerticalBox {
            preferred-width: parent.width * 1 / 4;
            Button {
                text: "Show";
            }

            Button {
                text: "Discard";
                clicked => {
                    root.discard();
                    pe.text = "";
                }
            }

            Button {
                text: "Append";
                clicked => {
                    root.append();
                }
            }

            Button {
                text: "Play";
            }
        }
    }
}

component Results inherits ListView {

    in property <[Parameter]> results;

    for data in results: HorizontalBox {
        Text {
            text: data.name;
        }

        Text {
            text: data.score;
        }
    }
}

export component DdDialog inherits Dialog {
    Rectangle {
        HorizontalLayout {
            spacing: 5px;
            StandardButton {
                kind: retry;
            }

            StandardButton {
                kind: close;
            }
        }
    }
}

export component MainWindow inherits Window {
    preferred-width: 400px;
    preferred-height: 400px;
    title: "Decision Maker";
    icon: @image-url("favicon/D.png");

    callback show;
    callback discard;
    callback append;
    callback play;
    callback parameters_edited(string);
    in-out property <string> parameters;
    in property <[Parameter]> results;

    in-out property <Parameter> lhs_param: { name: "lhs" };
    in-out property <Parameter> rhs_param: { name: "rhs" };

    VerticalBox {
        TabWidget {
            Tab {
                title: "Collect\nParameters";
                EditParams {
                    background: orange;

                    discard => {
                        root.discard();
                    }
                    append => {
                        root.append();
                    }
                    parameters_edited(bla) => {
                        root.parameters_edited(bla);
                    }
                    parameters: root.parameters;
                }
            }

            Tab {
                title: "Compete";
                Compete {
                    lhs_param: root.lhs_param;
                    rhs_param: root.rhs_param;
                    // background: pink;
            }
            }

            Tab {
                title: "Ranking";
                Results {
                    results: root.results;
                }
            }
        }

        DdDialog {
            preferred-height: 25px;
        }
    }
}
