import { TabWidget, TextEdit, Button, VerticalBox, StandardTableView, ListView, StandardListView, HorizontalBox, StandardButton } from "std-widgets.slint";

export struct Parameter  {
    name: string,
    score: int,
}
export enum Winner{Rhs, Lhs, Undecided}

component Compete inherits Rectangle {

    callback next_pair(Winner);
    /* slint can't yet do
    in-out property <Parameter> lhs_param;
    ...background:
    text: root.lhs_param.name;
    */

    in-out property <string> lhs_name;
    in-out property <string> rhs_name;

    VerticalBox {
        Text {
            horizontal-alignment: center;
            vertical-alignment: center;
            text: "Which one do you value higher?\nClick the corresponding button";
        }

        HorizontalBox {
            Button {
                text: root.lhs_name;
                clicked => {
                    root.next_pair(Winner.Lhs);
                }
            }

            Button {
                text: root.rhs_name;
                clicked => {
                    root.next_pair(Winner.Rhs);
                }
            }
        }
    }
}

component EditParams inherits Rectangle {

    callback show;
    callback discard;
    callback append;
    callback play;

    callback parameters_edited(string);
    in-out property <string> parameters: "";

    HorizontalLayout {

        VerticalBox {

            preferred-width: parent.width * 3 / 4;
            Text {
                text: "Enter Parameters";
            }

            pe := TextEdit {
                font-size: 14px;

                text: root.parameters;
                edited(text) => {
                    root.parameters_edited(self.text);
                }
            }
        }

        VerticalBox {
            preferred-width: parent.width * 1 / 4;
            Button {
                text: "Show consolidated";
                clicked => {
                    root.show();
                    pe.text = root.parameters;
                }
            }

            Button {
                text: "Discard";
                clicked => {
                    root.discard();
                    pe.text = root.parameters;
                }
            }

            Button {
                text: "Append";
                clicked => {
                    root.append();
                }
            }

            Button {
                text: "Play";
                clicked => {
                    root.play();
                }
            }
        }
    }
}

component Results inherits ListView {

    in property <[Parameter]> results;

    for data in results: HorizontalBox {
        Text {
            text: data.name;
        }

        Text {
            text: data.score;
        }
    }
}

export component DdDialog inherits Dialog {
    Rectangle {
        HorizontalLayout {
            spacing: 5px;
            StandardButton {
                kind: retry;
            }

            StandardButton {
                kind: close;
            }
        }
    }
}

export component MainWindow inherits Window {
    preferred-width: 400px;
    preferred-height: 400px;
    title: "Decision Maker";
    icon: @image-url("favicon/D.png");

    callback show;
    callback discard;
    callback append;
    callback play() -> bool;
    callback parameters_edited(string);

    callback next_pair(Winner);

    in-out property <string> parameters;
    in property <[Parameter]> results;
    in-out property <bool> compete_visible: false;
    in-out property <bool> ranking_visible: false;

    in-out property <Parameter> lhs_param: { name: "-" };
    in-out property <Parameter> rhs_param: { name: "-" };

    VerticalBox {
        TabWidget {
            Tab {
                title: "Collect\nParameters";
                EditParams {
                    background: orange;

                    show => {
                        root.show();
                    }
                    discard => {
                        root.discard();
                    }
                    append => {
                        root.append();
                    }
                    play => {
                        root.compete_visible = root.play();
                    }
                    parameters_edited(t) => {
                        root.parameters_edited(t);
                    }
                    parameters: root.parameters;
                }
            }

            Tab {

                title: "Compete";
                Compete {
                    visible: compete_visible;
                    lhs_name: root.lhs_param.name;
                    rhs_name: root.rhs_param.name;

                    next_pair(w) => {
                        root.next_pair(w);
                    }
                }
            }

            Tab {
                title: "Ranking";
                Results {
                    visible: ranking_visible;
                    results: root.results;
                }
            }
        }

        DdDialog {
            preferred-height: 25px;
        }
    }
}
