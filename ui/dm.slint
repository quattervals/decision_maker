import { TabWidget, TextEdit, Button, VerticalBox, StandardTableView, ListView, StandardListView, HorizontalBox, StandardButton } from "std-widgets.slint";

export struct Parameter  {
    name: string,
    score: int,
}
export enum Winner{Rhs, Lhs, Undecided}

component Compete inherits Rectangle {

    callback next_pair(Winner);
    /* slint can't yet do
    in-out property <Parameter> lhs_param;
    ...background:
    text: root.lhs_param.name;
    */

    in-out property <string> lhs_name;
    in-out property <string> rhs_name;

    VerticalBox {
        Text {
            horizontal-alignment: center;
            vertical-alignment: center;
            text: "Which one do you value higher?\nClick the corresponding button";
        }

        HorizontalBox {
            Button {
                text: root.lhs_name;
                clicked => {
                    root.next_pair(Winner.Lhs);
                }
            }

            Button {
                text: root.rhs_name;
                clicked => {
                    root.next_pair(Winner.Rhs);
                }
            }
        }
    }
}

component EditParams inherits Rectangle {

    callback show;
    callback discard;
    callback append;

    callback parameters_edited(string);
    in-out property <string> parameters: "";

    HorizontalLayout {

        VerticalBox {

            preferred-width: parent.width * 3 / 4;
            Text {
                text: "Enter Parameters";
            }

            pe := TextEdit {
                font-size: 14px;

                text: root.parameters;
                edited(text) => {
                    root.parameters_edited(self.text);
                }
            }
        }

        VerticalBox {
            preferred-width: parent.width * 1 / 4;
            Button {
                text: "Show consolidated";
                clicked => {
                    root.show();
                    pe.text = root.parameters;
                }
            }

            Button {
                text: "Discard";
                clicked => {
                    root.discard();
                    pe.text = root.parameters;
                }
            }

            Button {
                text: "Append";
                clicked => {
                    root.append();
                }
            }
        }
    }
}

component Results inherits Rectangle {

    in property <[Parameter]> results;

    ListView {

        for data in results: HorizontalBox {
            Text {
                text: data.name;
            }

            Text {
                text: data.score;
            }
        }
    }
}

export component DdDialog inherits Rectangle {

    in property <bool> play_enabled: false;
    in property <bool> results_enabled: false;

    callback play;
    callback return_edit;
    callback results;

    Rectangle {
        HorizontalBox {
            spacing: 5px;
            Button {
                text: "Play";
                enabled: play_enabled;
                clicked => {
                    root.play();
                }
            }

            Button {
                text: "Return To Edit";
                clicked => {
                    root.return_edit();
                }
            }

            Button {
                text: "Results";
                enabled: results_enabled;
                clicked => {
                    root.results();
                }
            }
        }
    }
}

export component MainWindow inherits Window {
    preferred-width: 400px;
    preferred-height: 400px;
    title: "Decision Maker";
    icon: @image-url("favicon/D.png");

    // edit
    callback show;
    callback discard;
    callback append;
    callback parameters_edited(string);
    in-out property <string> parameters;

    //compete
    in-out property <Parameter> lhs_param: { name: "-" };
    in-out property <Parameter> rhs_param: { name: "-" };
    callback next_pair(Winner);

    //results
    in property <[Parameter]> results;

    //dialog
    in property <bool> play_enabled: false;
    in property <bool> results_enabled: false;

    callback dlg_play;
    callback dlg_return_edit;
    callback dlg_results;

    // visibility
    in-out property <bool> edit_visible: true;
    in-out property <bool> compete_visible: false;
    in-out property <bool> result_visible: false;

    VerticalBox {

        Rectangle {

            preferred-height: parent.height * 4/5;

            EditParams {
                visible: edit_visible;
                background: orange;

                show => {
                    root.show();
                }
                discard => {
                    root.discard();
                }
                append => {
                    root.append();
                }
                parameters_edited(t) => {
                    root.parameters_edited(t);
                }
                parameters: root.parameters;
            }

            Compete {
                background: slategray;
                visible: compete_visible;
                lhs_name: root.lhs_param.name;
                rhs_name: root.rhs_param.name;

                next_pair(w) => {
                    root.next_pair(w);
                }
            }

            Results {
                background: lightskyblue;
                visible: result_visible;
                results: root.results;
            }
        }

        DdDialog {
            play_enabled: root.play_enabled;
            results_enabled: root.results_enabled;
            preferred-height: parent.height * 1/5;
            background: slategray;

            play => {
                root.dlg_play();
            }
            return_edit => {
                root.dlg_return_edit();
            }
            results => {
                root.dlg_results();
            }
        }
    }
}
