name: Rust CI

on:
  push:
    branches:
      - "**" # This will trigger the workflow on any branch
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry
          restore-keys: |
            ${{ runner.os }}-cargo-registry

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.os }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-ubuntu-latest
            ${{ runner.os }}-cargo-build-windows-latest
            ${{ runner.os }}-cargo-build-macos-latest

      - name: Build
        run: cargo build --release

      - name: Run unit tests
        run: cargo test --verbose

      - name: Upload Linux binary
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: decision_maker_linux
          path: target/release/decision_maker

      - name: Upload Windows binary
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: decision_maker_windows
          path: target\release\decision_maker.exe
      - name: Upload macOS binary
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: decision_maker_macos
          path: target/release/decision_maker

      - name: install cargo security tools
        run: cargo install cargo-deny cargo-cyclonedx

      - name: generate SBOM
        run: cargo cyclonedx --override-filename decision_maker_sbom -f json

      - name: Upload SBOM to Dependency-Track
        run: |
          curl -X POST "http://localhost:8081/api/v1/bom" \
              -H "Content-Type: multipart/form-data" \
              -H "X-API-Key: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}" \
              -F "project=${{ secrets.DEPENDENCY_TRACK_PROJECT_ID }}" \
              -F "bom=@decision_maker_sbom.json"

      - name: run cargo deny advisories
        id: cargo_deny_advisories
        run: cargo deny --format json check advisories  2> deny_advisories.json
        continue-on-error: true

      - name: Check script return value
        run: |
          if [ "${{ steps.cargo_deny_advisories.outcome }}" == "failure" ]; then
            echo "Cargo deny errors found."
          else
            echo "Script executed successfully."
          fi
